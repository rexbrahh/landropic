// This file is @generated by prost-build.
/// Initial handshake message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hello {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    /// Ed25519 public key
    #[prost(bytes = "vec", tag = "2")]
    pub device_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub device_name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    pub capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Folder synchronization summary
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FolderSummary {
    #[prost(string, tag = "1")]
    pub folder_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub folder_path: ::prost::alloc::string::String,
    /// Blake3 hash of manifest
    #[prost(bytes = "vec", tag = "3")]
    pub manifest_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "4")]
    pub total_size: u64,
    #[prost(uint64, tag = "5")]
    pub file_count: u64,
    #[prost(message, optional, tag = "6")]
    pub last_modified: ::core::option::Option<::prost_types::Timestamp>,
}
/// Request for missing content
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Want {
    #[prost(string, tag = "1")]
    pub folder_id: ::prost::alloc::string::String,
    /// Blake3 hashes of wanted chunks
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub chunk_hashes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag = "3")]
    pub priority: u64,
}
/// Acknowledgment message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ack {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// Error message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(enumeration = "error::ErrorType", tag = "1")]
    pub error_type: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub details: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Error`.
pub mod error {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ErrorType {
        Unknown = 0,
        ProtocolVersionMismatch = 1,
        AuthenticationFailed = 2,
        FolderNotFound = 3,
        PermissionDenied = 4,
        StorageFull = 5,
        InvalidRequest = 6,
    }
    impl ErrorType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "UNKNOWN",
                Self::ProtocolVersionMismatch => "PROTOCOL_VERSION_MISMATCH",
                Self::AuthenticationFailed => "AUTHENTICATION_FAILED",
                Self::FolderNotFound => "FOLDER_NOT_FOUND",
                Self::PermissionDenied => "PERMISSION_DENIED",
                Self::StorageFull => "STORAGE_FULL",
                Self::InvalidRequest => "INVALID_REQUEST",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "PROTOCOL_VERSION_MISMATCH" => Some(Self::ProtocolVersionMismatch),
                "AUTHENTICATION_FAILED" => Some(Self::AuthenticationFailed),
                "FOLDER_NOT_FOUND" => Some(Self::FolderNotFound),
                "PERMISSION_DENIED" => Some(Self::PermissionDenied),
                "STORAGE_FULL" => Some(Self::StorageFull),
                "INVALID_REQUEST" => Some(Self::InvalidRequest),
                _ => None,
            }
        }
    }
}
/// File manifest entry
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileEntry {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub size: u64,
    /// Unix file permissions
    #[prost(uint32, tag = "3")]
    pub mode: u32,
    #[prost(message, optional, tag = "4")]
    pub modified: ::core::option::Option<::prost_types::Timestamp>,
    /// Ordered list of chunk hashes
    #[prost(bytes = "vec", repeated, tag = "5")]
    pub chunk_hashes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Full file content hash
    #[prost(bytes = "vec", tag = "6")]
    pub content_hash: ::prost::alloc::vec::Vec<u8>,
}
/// Complete manifest for a folder
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Manifest {
    #[prost(string, tag = "1")]
    pub folder_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub files: ::prost::alloc::vec::Vec<FileEntry>,
    #[prost(message, optional, tag = "3")]
    pub generated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Self-hash for integrity
    #[prost(bytes = "vec", tag = "4")]
    pub manifest_hash: ::prost::alloc::vec::Vec<u8>,
}
/// Chunk data transfer
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChunkData {
    #[prost(bytes = "vec", tag = "1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub compressed: bool,
    #[prost(uint32, tag = "4")]
    pub uncompressed_size: u32,
}
